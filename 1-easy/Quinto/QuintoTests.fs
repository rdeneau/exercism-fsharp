module QuintoTests

open Swensen.Unquote
open Xunit
open Quinto

[<Fact>]
let ``Candidate of 3 * 5 = 15 + 4 = 19 * 2 = 38 - 1 = 37`` () =
    let candidate =
        { First  = 3
          Digop1 = 5, Op.mul
          Digop2 = 4, Op.add
          Digop3 = 2, Op.mul
          Digop4 = 1, Op.sub }
    let actual =
        candidate |> Candidate.eval,
        candidate |> Candidate.formula
    actual =! (37, "3 * 5 = 15 + 4 = 19 * 2 = 38 - 1 = 37")

[<Fact>]
let ``Normalize candidate "3 + 1 = 4 * 2 = 8 * 4 = 32 + 5 = 37"`` () =
    let candidate =
        { First  = 3
          Digop1 = 1, Op.add
          Digop2 = 2, Op.mul
          Digop3 = 4, Op.mul
          Digop4 = 5, Op.add }
    let actual =
        candidate
        |> Candidate.normalize
        |> Candidate.formula
    actual =! "1 + 3 = 4 * 2 = 8 * 4 = 32 + 5 = 37"

[<Fact>]
let ``Verify 3 * 5 = 15 + 4 = 19 * 2 = 38 - 1 = 37`` () =
    (verify [1;2;3;4;5] 37 "3 * 5 = 15 + 4 = 19 * 2 = 38 - 1 = 37") =! true

[<Fact>]
let ``Resolve all 1, 2, 3, 4, 5 => 37`` () =
    let expected =
        [ "1 * 2 = 2 * 4 = 8 * 5 = 40 - 3 = 37"
          "1 * 2 = 2 * 5 = 10 * 4 = 40 - 3 = 37"
          "1 * 3 = 3 + 4 = 7 * 5 = 35 + 2 = 37"
          "1 * 4 = 4 * 2 = 8 * 5 = 40 - 3 = 37"
          "1 * 4 = 4 * 5 = 20 * 2 = 40 - 3 = 37"
          "1 * 4 = 4 + 3 = 7 * 5 = 35 + 2 = 37"
          "1 * 5 = 5 * 2 = 10 * 4 = 40 - 3 = 37"
          "1 * 5 = 5 * 4 = 20 * 2 = 40 - 3 = 37"
          "1 + 3 = 4 * 2 = 8 * 4 = 32 + 5 = 37"
          "1 + 3 = 4 * 4 = 16 * 2 = 32 + 5 = 37"
          "1 + 4 = 5 * 3 = 15 * 5 = 75 / 2 = 37"
          "1 + 4 = 5 * 5 = 25 * 3 = 75 / 2 = 37"
          "2 * 4 = 8 * 1 = 8 * 5 = 40 - 3 = 37"
          "2 * 4 = 8 * 5 = 40 * 1 = 40 - 3 = 37"
          "2 * 4 = 8 * 5 = 40 - 3 = 37 * 1 = 37"
          "2 * 4 = 8 * 5 = 40 - 3 = 37 / 1 = 37"
          "2 * 4 = 8 * 5 = 40 / 1 = 40 - 3 = 37"
          "2 * 4 = 8 / 1 = 8 * 5 = 40 - 3 = 37"
          "2 * 5 = 10 * 1 = 10 * 4 = 40 - 3 = 37"
          "2 * 5 = 10 * 4 = 40 * 1 = 40 - 3 = 37"
          "2 * 5 = 10 * 4 = 40 - 3 = 37 * 1 = 37"
          "2 * 5 = 10 * 4 = 40 - 3 = 37 / 1 = 37"
          "2 * 5 = 10 * 4 = 40 / 1 = 40 - 3 = 37"
          "2 * 5 = 10 + 1 = 11 * 3 = 33 + 4 = 37"
          "2 * 5 = 10 / 1 = 10 * 4 = 40 - 3 = 37"
          "2 / 1 = 2 * 4 = 8 * 5 = 40 - 3 = 37"
          "2 / 1 = 2 * 5 = 10 * 4 = 40 - 3 = 37"
          "3 * 5 = 15 + 4 = 19 * 2 = 38 - 1 = 37"
          "3 + 4 = 7 * 1 = 7 * 5 = 35 + 2 = 37"
          "3 + 4 = 7 * 5 = 35 * 1 = 35 + 2 = 37"
          "3 + 4 = 7 * 5 = 35 + 2 = 37 * 1 = 37"
          "3 + 4 = 7 * 5 = 35 + 2 = 37 / 1 = 37"
          "3 + 4 = 7 * 5 = 35 / 1 = 35 + 2 = 37"
          "3 + 4 = 7 / 1 = 7 * 5 = 35 + 2 = 37"
          "3 / 1 = 3 + 4 = 7 * 5 = 35 + 2 = 37"
          "4 * 5 = 20 * 1 = 20 * 2 = 40 - 3 = 37"
          "4 * 5 = 20 * 2 = 40 * 1 = 40 - 3 = 37"
          "4 * 5 = 20 * 2 = 40 - 3 = 37 * 1 = 37"
          "4 * 5 = 20 * 2 = 40 - 3 = 37 / 1 = 37"
          "4 * 5 = 20 * 2 = 40 / 1 = 40 - 3 = 37"
          "4 * 5 = 20 / 1 = 20 * 2 = 40 - 3 = 37"
          "4 / 1 = 4 * 2 = 8 * 5 = 40 - 3 = 37"
          "4 / 1 = 4 * 5 = 20 * 2 = 40 - 3 = 37"
          "4 / 1 = 4 + 3 = 7 * 5 = 35 + 2 = 37"
          "5 - 2 = 3 * 3 = 9 * 4 = 36 + 1 = 37"
          "5 - 2 = 3 * 4 = 12 * 3 = 36 + 1 = 37"
          "5 / 1 = 5 * 2 = 10 * 4 = 40 - 3 = 37"
          "5 / 1 = 5 * 4 = 20 * 2 = 40 - 3 = 37" ]
    (resolve [1;2;3;4;5] 37) =! expected

[<Fact>]
let ``Count solutions of 5, 6, 7, 8, 9 => 42`` () =
    (resolve [5;6;7;8;9] 42) |> List.length =! 0
